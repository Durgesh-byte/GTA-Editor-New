/*****************************************************************//**
 * \file   GTATestConfig.h
 * \brief  
 * \details		This class is used to demonstrate a number of section commands.
 *				This class is designed to handle the application configuration file (AppConfig.ini), which is supposed to be with the exe file.
 *				It uses the GTAIniConfigManager to work, but act as a curtain behind which the reading and writing operation run.
 * 
 * \author 
 * \date   August 2022
 *********************************************************************/
#ifndef GTATestConfig_H
#define GTATestConfig_H

#include <string>
#include "GTAIniConfigManager.h"
#include <sstream>
#include "GTAControllers.h"
#include <cctype>
#include <algorithm>

#pragma warning(push, 0)
#include <qstring.h>
#include <qfileinfo.h>
#pragma warning(pop)

const std::string TEST_SECTION_PATH = "PATH";								//!< 
const std::string TEST_KEY_LIBRARYPATH = "LIBRARYPATH";						//!< specific ConfTest (bench database)
const std::string TEST_KEY_LOGDIRPATH = "LOGDIRPATH";						//!< specific bench (log generated by Emotest)
const std::string TEST_KEY_REPOSITORYPATH = "REPOSITORYPATH";				//!< TestDatabase specific ConfTest => Header and User Data can be moved here ?
const std::string TEST_KEY_TOOLDATAPATH = "TOOLDATAPATH";					//!< All data are "conf bench" but not 'HEADER' and 'USER_Data' (Test conf)
const std::string TEST_KEY_GITDBPATH = "GITDBPATH";
const std::string TEST_KEY_GTACONTROLLER = "GTACONTROLLERPATH";
const std::string TEST_KEY_AUTOLAUNCHERPATH = "AUTOLAUNCHERPATH";
const std::string TEST_KEY_AUTOLAUNCHERCONFIGPATH = "AUTOLAUNCHERCONFIGPATH";
const std::string TEST_KEY_GTACONTROLLEROUTPUTLOGPATH = "GTACONTROLLEROUTPUTLOGPATH";


const std::string RECORDING_SETTINGS = "RECORDINGSETTINGS";					//!< 
const std::string VIDEO_RECORDING_TOOL = "VIDEO_RECORDING_TOOL";			//!< could be (Snagit-bridge, SKYBOX.video_bridge, ...)

const std::string TEST_SECTION_USERSETTINGS = "USERSETTINGS";				//!< 
const std::string TEST_KEY_CHANNELSELECTION = "CHANNEL_SELECTION";			//!< Bench
const std::string TEST_KEY_BENCHDBSTARTUP = "BENCH_DB_STARTUP";				//!< Appli
const std::string TEST_KEY_PROCDBSTARTUP = "PROC_DB_STARTUP";				//!< Appli
const std::string TEST_KEY_DEBUGMODEIP = "DEBUG_MODE_IP";					//!< Appli
const std::string TEST_KEY_DEBUGMODEPORT = "DEBUG_MODE_PORT";				//!< Appli
const std::string TEST_KEY_DECIMALPLACES = "DECIMAL_PLACES";				//!< Appli
const std::string TEST_KEY_DVSAVEDLIST = "DV_SAVED_LIST";					//!< Appli
const std::string TEST_KEY_ENGINESELECTION = "ENGINE_SELECTION";			//!< Test
const std::string TEST_KEY_ENINVOKELOCALVAR = "EN_INVOKE_LOCAL_VAR";		//!< ? Check in source code? (conf Bench)
const std::string TEST_KEY_GENERICSCXML = "GENERIC_SCXML";					//!< Test
const std::string TEST_KEY_INITSUBSCRIBEEND = "INIT_SUBSCRIBE_END";			//!< Auto Unsuscribe on start => Test
const std::string TEST_KEY_INITSUBSCRIBESTART = "INIT_SUBSCRIBE_START";		//!< Auto Unsuscribe on stop => Test
const std::string TEST_KEY_LASTLAUNCHELEMPATH = "LASTLAUNCHELEMPATH";		//!< Appli
const std::string TEST_KEY_LASTLOGPATH = "LASTLOGPATH";						//!< Appli
const std::string TEST_KEY_LOGENABLE = "LOG_ENABLE";						//!< Appli
const std::string TEST_KEY_LOGMESSAGES = "LOG_MESSAGES";					//!< Bench
const std::string TEST_KEY_LOOPTIMEOUTSUBSTEPS = "LOOP_TIMEOUT_SUBSTEPS";	//!< Appli
const std::string TEST_KEY_MANUALACTIONTIMEOUTSTATUS = "MANUAL_ACTION_TIMEOUT_STATUS";	//!< Test
const std::string TEST_KEY_MANUALACTIONTIMEOUTVALUE = "MANUAL_ACTION_TIMEOUT_VALUE";	//!< Test
const std::string TEST_KEY_NEWLOGFORMAT = "NEW_LOG_FORMAT";					//!< Bench
const std::string TEST_KEY_NEWSCXMLSTRUCT = "NEW_SCXML_STRUCT";				//!< DELETE / value TRUE in source code. Check impact
const std::string TEST_KEY_PIRINVOKEFORSCXML = "PIR_INVOKE_FOR_SCXML";		//!< Test
const std::string TEST_KEY_PIRWAITTIME = "PIR_WAIT_TIME";					//!< Test
const std::string TEST_KEY_PIRWAITTIMEVAL = "PIR_WAIT_TIME_VAL";			//!< Test
const std::string TEST_KEY_PRINTTABLESTATUS = "PRINT_TABLE_STATUS";			//!< Test
const std::string TEST_KEY_RESIZEROW = "RESIZE_ROW";						//!< Appli
const std::string TEST_KEY_RESULTVIEWSAVEDLIST = "RESULT_VIEW_SAVED_LIST";	//!< Appli
const std::string TEST_KEY_SAVEBEFOREEXPORT = "SAVEBEFOREEXPORT";			//!< Bench
const std::string TEST_KEY_STANDALONEEXECMODE = "STANDALONE_EXEC_MODE";		//!< Appli
const std::string TEST_KEY_SUBSCRIBEUNSUBSCRIBETIMEOUTSTATUS = "SUBSCRIBE_UNSUBSCRIBE_TIMEOUT_STATUS";	//!< Bench
const std::string TEST_KEY_SUBSCRIBEUNSUBSCRIBETIMEOUTVALUE = "SUBSCRIBE_UNSUBSCRIBE_TIMEOUT_VALUE";	//!< Bench
const std::string TEST_KEY_SVNADDONEXIT = "SVN_ADD_ON_EXIT";				//!< Bench
const std::string TEST_KEY_SVNCOMMITONEXIT = "SVN_COMMIT_ON_EXIT";			//!< Bench
const std::string TEST_KEY_SVNUPDATEONSTART = "SVN_UPDATE_ON_START";		//!< Bench
const std::string TEST_KEY_USCXMLBASEDSCXMLEN = "USCXML_BASED_SCXML_EN";	//!< Bench
const std::string TEST_KEY_VALIDATIONENABLE = "VALIDATION_ENABLE";			//!< Test
const std::string TEST_KEY_VIRTUALPMR = "VIRTUAL_PMR";						//!< DELETE

const std::string TEST_SECTION_GENERAL = "GENERAL";							//!< Bench
const std::string TEST_KEY_DATATVGEOMETRY = "DataTV_Geometry";				//!< Bench
const std::string TEST_KEY_RESULTPAGEGEOMETRY = "Result_Page_Geometry";		//!< Bench
const std::string TEST_KEY_GEOMETRY = "geometry";							//!< Bench
const std::string TEST_KEY_WINDOWSTATE = "windowState";						//!< Bench

const std::string TEST_SECTION_LIVEVIEWUSERSETTINGS = "LIVEVIEW_USERSETTINGS";	//!< Bench
const std::string TEST_KEY_BISGIP = "BISG_IP";								//!< Bench
const std::string TEST_KEY_BISGPORT = "BISG_PORT";							//!< Bench
const std::string TEST_KEY_TOOLLIST = "TOOL_LIST";							//!< Bench


/** Structure for the parameters in the configuration file.
 *  Stores its value, its default value, if it is a mandatory parameter and if the parameter has changed during the application
 */
template <typename T>
struct Parameter_test
{
	Parameter_test(T default_value, bool isMandatory)
		: _default(default_value), _isMandatory(isMandatory), _hasChanged(false) {}

	T get()
	{
		if (_useDefault)
			return _default;
		else
			return _value;
	}
	T _value;
	T _default;
	bool _isMandatory;
	bool _useDefault;
	bool _hasChanged;
};

/*Structure which store all the parameters.*/
struct TestParameters
{
	TestParameters() {};
	~TestParameters()
	{
		delete _library_path;
		delete _log_dir_path;
		delete _repository_path;
		delete _tool_data_path;
		delete _git_db_path;

		delete _channel_selection;
		delete _bench_db_startup;
		delete _proc_db_startup;
		delete _debug_mode_ip;
		delete _debug_mode_port;
		delete _decimal_places;
		delete _dv_saved_list;
		delete _engine_selection;
		delete _en_invoke_local_var;
		delete _generic_scxml;
		delete _init_subscribe_end;
		delete _init_subscribe_start;
		delete _last_launch_elem_path;
		delete _last_log_path;
		delete _log_enable;
		delete _log_messages;
		delete _loop_timeout_substeps;
		delete _manual_action_timeout_status;
		delete _manual_action_timeout_value;
		delete _new_log_format;
		delete _new_scxml_struct;
		delete _pir_invoke_for_scxml;
		delete _pir_wait_time;
		delete _pir_wait_time_val;
		delete _print_table_status;
		delete _resize_row;
		delete _result_view_saved_list;
		delete _save_before_export;
		delete _subscribe_unsubscribe_timeout_status;
		delete _subscribe_unsubscribe_timeout_value;
		delete _svn_add_on_exit;
		delete _svn_commit_on_exit;
		delete _svn_update_on_start;
		delete _uscxml_based_scxml_en;
		delete _validation_enable;
		delete _virtual_pmr;

		delete _datatv_geometry;
		delete _result_page_geometry;
		delete _geometry;
		delete _window_state;
		
		delete _bisg_ip;
		delete _bisg_port;
		delete _tool_list;
	}

	Parameter_test<std::string>* _library_path;
	Parameter_test<std::string>* _log_dir_path;
	Parameter_test<std::string>* _repository_path;
	Parameter_test<std::string>* _tool_data_path;
	Parameter_test<std::string>* _git_db_path;
	Parameter_test<std::string>* _gta_controller_path;
	Parameter_test<std::string>* _auto_launcher_path;
	Parameter_test<std::string>* _auto_launcher_config_path;
	Parameter_test<std::string>* _gta_controller_output_log_path;


	Parameter_test<std::string>* _recording_tool;

	Parameter_test<bool>* _channel_selection;
	Parameter_test<bool>* _bench_db_startup;
	Parameter_test<bool>* _proc_db_startup;
	Parameter_test<std::string>* _debug_mode_ip;
	Parameter_test<int>* _debug_mode_port;
	Parameter_test<std::string>* _decimal_places;
	Parameter_test<std::string>* _dv_saved_list;
	Parameter_test<std::string>* _engine_selection;
	Parameter_test<bool>* _en_invoke_local_var;
	Parameter_test<bool>* _generic_scxml;
	Parameter_test<bool>* _init_subscribe_end;
	Parameter_test<bool>* _init_subscribe_start;
	Parameter_test<std::string>* _last_launch_elem_path;
	Parameter_test<std::string>* _last_log_path;
	Parameter_test<bool>* _log_enable;
	Parameter_test<std::string>* _log_messages;
	Parameter_test<bool>* _loop_timeout_substeps;
	Parameter_test<bool>* _manual_action_timeout_status;
	Parameter_test<std::string>* _manual_action_timeout_value;
	Parameter_test<bool>* _new_log_format;
	Parameter_test<bool>* _new_scxml_struct;
	Parameter_test<bool>* _pir_invoke_for_scxml;
	Parameter_test<bool>* _pir_wait_time;
	Parameter_test<std::string>* _pir_wait_time_val;
	Parameter_test<bool>* _print_table_status;
	Parameter_test<bool>* _resize_row;
	Parameter_test<std::string>* _result_view_saved_list;
	Parameter_test<bool>* _save_before_export;
	Parameter_test<bool>* _stand_alone_exec_mode;
	Parameter_test<bool>* _subscribe_unsubscribe_timeout_status;
	Parameter_test<std::string>* _subscribe_unsubscribe_timeout_value;
	Parameter_test<bool>* _svn_add_on_exit;
	Parameter_test<bool>* _svn_commit_on_exit;
	Parameter_test<bool>* _svn_update_on_start;
	Parameter_test<bool>* _uscxml_based_scxml_en;
	Parameter_test<bool>* _validation_enable;
	Parameter_test<bool>* _virtual_pmr;

	Parameter_test<std::string>* _datatv_geometry;
	Parameter_test<std::string>* _result_page_geometry;
	Parameter_test<std::string>* _geometry;
	Parameter_test<std::string>* _window_state;

	Parameter_test<std::string>* _bisg_ip;
	Parameter_test<int>* _bisg_port;
	Parameter_test<std::string>* _tool_list;
};

/*Class handling the application configuration file.*/
class GTAControllers_SHARED_EXPORT TestConfig
{
public:
	~TestConfig();
	static TestConfig* getInstance();
	static void resetInstance();

	void initialize(const QString& path);
	bool checkValidity(bool printErrors = false);

	bool loadConf(const QString& path, bool printErrors = false);
	void saveConf();
	void resetChanges();

	bool setParamString(Parameter_test<std::string>* param, const std::string& section, const std::string& key);
	bool setParamBool(Parameter_test<bool>* param, const std::string& section, const std::string& key);
	bool setParamInt(Parameter_test<int>* param, const std::string& section, const std::string& key);

	// ------------ GETTERS ---------------
	// 
	// PATH getters
	std::string getLibraryPath();
	std::string getLogDirPath();
	std::string getRepositoryPath();
	std::string getToolDataPath();
	std::string getGitDbPath();
	std::string getGTAControllerPath();
	std::string getAutoLauncherPath();
	std::string getAutoLauncherConfigPath();
	std::string getGTAControllerOutputLogPath();

	// RECORDINGSETTINGS getters 
	std::string getRecordingToolName();

	// USERSETTINGS getters
	bool getChannelSelection();
	bool getBenchDBStartup();
	bool getProcDBStartup();
	std::string getDebugModeIP();
	int getDebugModePort();
	std::string getDecimalPlaces();
	std::string getDVSavedList();
	std::string getEngineSelection();
	bool getENInvokeLocalVar();
	bool getGenericSCXML();
	bool getInitSubscribeEnd();
	bool getInitSubscribeStart();
	std::string getLastLaunchElemPath();
	std::string getLastLogPath();
	bool getLogEnable();
	std::string getLogMessages();
	bool getLoopTimeoutSubsteps();
	bool getManualActionTimeoutStatus();
	std::string getManualActionTimeoutValue();
	bool getNewLogFormat();
	bool getNewSCXMLStruct();
	bool getPIRInvokeForSCXML();
	bool getPIRWaitTime();
	std::string getPIRWaitTimeVal();
	bool getPrintTableStatus();
	bool getResizeRow();
	std::string getResultViewSavedList();
	bool getSaveBeforeExport();
	bool getStandAloneExecMode();
	bool getSubscribeUnsubscribeTimeoutStatus();
	std::string getSubscribeUnsubscribeTimeoutValue();
	bool getSVNAddOnExit();
	bool getSVNCommitOnExit();
	bool getSVNUpdateOnStart();
	bool getUSCXMLBasedSCXMLEN();
	bool getValidationEnable();
	bool getVirtualPMR();

	// GENERAL getters
	std::string getDataTVGeometry();
	std::string getResultPageGeometry();
	std::string getGeometry();
	std::string getWindowState();

	// LIVEVIEW USERSETTINGS getters
	std::string getBISGIP();
	int getBISGPort();
	std::string getToolList();

	// ------------ SETTERS ---------------
	void setPath(QString path);

	// PATH setters
	void setLibraryPath(const std::string& value);
	void setLogDirPath(const std::string& value);
	void setRepositoryPath(const std::string& value);
	void setToolDataPath(const std::string& value); 
	void setGitDbPath(const std::string& value);
	void setGTAControllerPath(const std::string& value);
	void setAutoLauncherPath(const std::string& value);
	void setAutoLauncherConfigPath(const std::string& value);
	void setGTAControllerOutputLogPath(const std::string& value);

	// RECORDINGSETTINGS setters 
	void setRecordingToolName(const std::string& value);

	// USERSETTINGS setters
	void setChannelSelection(const bool& value);
	void setBenchDBStartup(const bool& value);
	void setProcDBStartup(const bool& value);
	void setDebugModeIP(const std::string& value);
	void setDebugModePort(const int& value);
	void setDecimalPlaces(const std::string& value);
	void setDVSavedList(const std::string& value);
	void setEngineSelection(const std::string& value);
	void setENInvokeLocalVar(const bool& value);
	void setGenericSCXML(const bool& value);
	void setInitSubscribeEnd(const bool& value);
	void setInitSubscribeStart(const bool& value);
	void setLastLaunchElemPath(const std::string& value);
	void setLastLogPath(const std::string& value);
	void setLogEnable(const bool& value);
	void setLogMessages(const std::string& value);
	void setLoopTimeoutSubsteps(const bool& value);
	void setManualActionTimeoutStatus(const bool& value);
	void setManualActionTimeoutValue(const std::string& value);
	void setNewLogFormat(const bool& value);
	void setNewSCXMLStruct(const bool& value);
	void setPIRInvokeForSCXML(const bool& value);
	void setPIRWaitTime(const bool& value);
	void setPIRWaitTimeVal(const std::string& value);
	void setPrintTableStatus(const bool& value);
	void setResizeRow(const bool& value);
	void setResultViewSavedList(const std::string& value);
	void setSaveBeforeExport(const bool& value);
	void setStandAloneExecMode(const bool& value);
	void setSubscribeUnsubscribeTimeoutStatus(const bool& value);
	void setSubscribeUnsubscribeTimeoutValue(const std::string& value);
	void setSVNAddOnExit(const bool& value);
	void setSVNCommitOnExit(const bool& value);
	void setSVNUpdateOnStart(const bool& value);
	void setUSCXMLBasedSCXMLEN(const bool& value);
	void setValidationEnable(const bool& value);
	void setVirtualPMR(const bool& value);

	// GENERAL setters
	void setDataTVGeometry(const std::string& value);
	void setResultPageGeometry(const std::string& value);
	void setGeometry(const std::string& value);
	void setWindowState(const std::string& value);

	// LIVEVIEW USERSETTINGS setters
	void setBISGIP(const std::string& value);
	void setBISGPort(const int& value);
	void setToolList(const std::string& value);

private:
	IniConfigManager* _configManager;
	TestParameters _params;
	QString _path;
	std::vector<std::pair<std::string, std::string> > _error_log;

	// Singleton design pattern
	static TestConfig* instance; ///< Singleton instance
	TestConfig();
	TestConfig(TestConfig&) = delete;
	void operator=(const TestConfig&) = delete;
};

#endif
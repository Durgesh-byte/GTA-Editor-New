name: SonarCloud C++ Analysis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: windows-latest

    steps:
      # 1. Checkout code (required for SonarCloud analysis)
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for SonarCloud

      # 2. Install Qt using aqtinstall (recommended for GitHub Actions)
      - name: Install Qt
        run: |
          python -m pip install aqtinstall
          python -m aqt install-qt windows desktop 5.15.2 win64_msvc2019_64 -O C:\Qt
          echo "C:\Qt\5.15.2\msvc2019_64\bin" >> $GITHUB_PATH

      # 3. Verify Qt installation
      - name: Check Qt
        run: qmake --version

      # 4. Setup MSBuild (VS 2022)
      - uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '17.0'

      # 5. Install SonarScanner (native binary version)
      - name: Setup SonarScanner
        run: |
          mkdir sonar-scanner
          curl -o scanner.zip -L https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-windows.zip
          unzip scanner.zip -d sonar-scanner
          echo "$PWD/sonar-scanner/sonar-scanner-5.0.1.3006-windows/bin" >> $GITHUB_PATH

      # 6. Initialize SonarScanner
      - name: SonarCloud Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=Durgesh-byte_GTA-Editor-New \
            -Dsonar.organization=${{ secrets.SONAR_ORG }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.cfamily.build-wrapper-output=bw-output

      # 7. Build solution
      - name: Build with MSBuild
        run: msbuild GTAAPPLICATION.sln /t:rebuild /p:Configuration=Release /p:Platform=x64

      # 8. Finalize analysis
      - name: SonarCloud Results
        if: always()
        run: sonar-scanner -Dsonar.token=${{ secrets.SONAR_TOKEN }} end

name: SonarCloud Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: windows-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Step 2: Install Python (needed for aqtinstall to install Qt)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # Step 3: Install Qt using aqtinstall
      - name: Install Qt
        run: |
          pip install aqtinstall
          aqt install-qt --outputdir C:\Qt windows desktop 6.5.0 win64_msvc2019_64
        shell: cmd

      # Step 4: Set up Qt environment variables
      - name: Set Qt environment variables
        run: |
          echo "QTDIR=C:\Qt\6.5.0\msvc2019_64" >> $env:GITHUB_ENV
          echo "PATH=$env:QTDIR\bin;$env:PATH" >> $env:GITHUB_ENV
        shell: pwsh

      # Step 5: Set up Visual Studio environment (for MSBuild)
      - name: Set up Visual Studio Build Tools
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '17.0'  # Specify Visual Studio 2022

      # Step 6: Install SonarScanner for MSBuild
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"Durgesh-byte_GTA-Editor-New" /o:"${{ secrets.SONAR_ORG }}" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.verbose=true

      # Step 7: Build the project with MSBuild
      - name: Build with MSBuild
        run: |
          msbuild GTAAPPLICATION.sln -t:rebuild -verbosity:diagnostic

      # Step 8: End SonarScanner and upload results
      - name: End SonarScanner
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

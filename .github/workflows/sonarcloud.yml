name: SonarCloud Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  QT_VERSION: '5.15.2'  # Change to your required version
  QT_ARCH: 'win64_msvc2019_64'  # Change if using different compiler
  BUILD_CONFIG: 'Release'
  BUILD_PLATFORM: 'x64'

jobs:
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: windows-latest

    steps:
      # 1. Checkout code with full history
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      # 2. Setup Python (required for aqtinstall)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3. Install Qt (simplified approach)
      - name: Install Qt
        shell: pwsh
        run: |
          python -m pip install aqtinstall
          python -m aqt install-qt windows desktop ${{ env.QT_VERSION }} ${{ env.QT_ARCH }} --outputdir C:\Qt
          echo "QT_DIR=C:\Qt\${{ env.QT_VERSION }}\${{ env.QT_ARCH }}" >> $env:GITHUB_ENV
          echo "PATH=C:\Qt\${{ env.QT_VERSION }}\${{ env.QT_ARCH }}\bin;$env:PATH" >> $env:GITHUB_ENV

      # 4. Verify Qt installation
      - name: Verify Qt
        shell: pwsh
        run: |
          if (-not (Test-Path "$env:QT_DIR\bin\qmake.exe")) {
              Write-Error "Qt installation failed - qmake not found"
              exit 1
          }
          Write-Output "Qt successfully installed at $env:QT_DIR"

      # 5. Setup MSBuild
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '17.0'  # VS 2022

      # 6. Install SonarScanner
      - name: Install SonarScanner
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 5.13.0
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # 7. Initialize SonarScanner
      - name: SonarCloud Scan
        run: |
          dotnet sonarscanner begin `
            /k:"Durgesh-byte_GTA-Editor-New" `
            /o:"${{ secrets.SONAR_ORG }}" `
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}" `
            /d:sonar.host.url="https://sonarcloud.io" `
            /d:sonar.cfamily.build-wrapper-output=bw-output

      # 8. Build solution
      - name: Build Solution
        shell: pwsh
        run: |
          msbuild GTAAPPLICATION.sln `
            -t:rebuild `
            -p:Qt5_DIR="$env:QT_DIR" `
            -p:Configuration=${{ env.BUILD_CONFIG }} `
            -p:Platform=${{ env.BUILD_PLATFORM }} `
            -verbosity:diagnostic `
            -nr:false

      # 9. Finalize SonarScanner
      - name: SonarCloud Results
        if: always()
        run: |
          dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # 10. Upload diagnostics
      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-diagnostics
          path: |
            *.log
            **/*.log
